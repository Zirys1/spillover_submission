{
    "collab_server" : "",
    "contents" : "library(xkcd)\nlibrary(extrafont)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(scales)\nlibrary(stringr)\nlibrary(ggrepel)\nlibrary(tidytext)\ncommon_ops <-  list(theme(plot.title = element_text(size=8),\n                          axis.text.y = element_text(size = 8, hjust = 1),\n                          axis.text.x = element_text(size = 8, hjust = 1),\n                          axis.title = element_text(size = 8),\n                          strip.text = element_text(size = 8),\n                          legend.position=\"bottom\",\n                          panel.grid.major=element_blank(),\n                          panel.grid.minor=element_blank(),\n                          panel.border=element_blank(),\n                          axis.line=element_line(),\n                          text=element_text()))\n\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n    library(grid)\n    \n    # Make a list from the ... arguments and plotlist\n    plots <- c(list(...), plotlist)\n    \n    numPlots = length(plots)\n    \n    # If layout is NULL, then use 'cols' to determine layout\n    if (is.null(layout)) {\n        # Make the panel\n        # ncol: Number of columns of plots\n        # nrow: Number of rows needed, calculated from # of cols\n        layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                         ncol = cols, nrow = ceiling(numPlots/cols))\n    }\n    \n    if (numPlots==1) {\n        print(plots[[1]])\n        \n    } else {\n        # Set up the page\n        grid.newpage()\n        pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n        \n        # Make each plot, in the correct location\n        for (i in 1:numPlots) {\n            # Get the i,j matrix positions of the regions that contain this subplot\n            matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n            \n            print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                            layout.pos.col = matchidx$col))\n        }\n    }\n}\n\nurl <- 'http://www.trumptwitterarchive.com/data/realdonaldtrump/%s.json'\nSys.setlocale(\"LC_TIME\", \"C\")\nall_tweets <- map(2009:2018, ~sprintf(url, .x)) %>%\n  map_df(jsonlite::fromJSON, simplifyDataFrame = TRUE) %>%\n  mutate(created_at = parse_date_time(created_at, \"a b! d! H!:M!:S! z!* Y!\")) %>%\n  tbl_df()\n\nall_tweet_words <- all_tweets %>%\n  mutate(text = str_replace_all(text, \"https?://t.co/[A-Za-z\\\\d]+|&amp;\", \"\")) %>%\n  filter(!str_detect(text, \"^(\\\"|RT)\")) %>%\n  unnest_tokens(word, text, token = \"regex\", pattern = \"reg\") %>%\n  filter(!word %in% stop_words$word, str_detect(word, \"[a-z]\"))\n\ncampaign_tweets <- all_tweets %>%\n    filter(created_at >= \"2015-06-16\") %>%\n    mutate(source = str_replace(source, \"Twitter for \", \"\")) %>%\n    filter(!str_detect(text, \"^(\\\"|RT)\"))\n\nct <- campaign_tweets %>%\n  group_by(month = round_date(created_at, \"month\")) %>%\n  filter(month >= \"2016-12-01\") %>% \n  summarize(tweets = n(),\n            fake_news = sum(str_detect(str_to_lower(text), \"fake news\")),\n            ratio = sum(str_detect(str_to_lower(text), \"fake news\")/tweets)*100) %>% \n  ggplot(aes(x =month, y = ratio)) +\n  geom_line(size = 1) +\n  geom_point(shape = 15, color = \"darkgrey\", size = 2) +\n  scale_y_continuous(breaks = c(seq(0,10,2)), limits = c(0,11)) +\n  theme_bw()+\n  ylab(\"Percentage of tweets\\nusing the term 'fake news'\") +\n  xlab(NULL) +\n  ggtitle(\"A: Usage of term 'fake news' in tweets\")  +\n  common_ops +\n  theme(panel.grid.major.x = element_line(size=.1, colour = \"grey\"),\n        panel.grid.major.y = element_blank())\n\n# Get sentiment of “fake news” tweets\n# filter out tweets that include 'fake news'\ndata(\"stop_words\")\nst <- campaign_tweets %>%\n  group_by(month = round_date(created_at, \"month\")) %>% \n  filter(str_detect(str_to_lower(text), \"fake news\")) %>% #select only tweets where he uses words 'fake news'\n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  inner_join(get_sentiments(\"afinn\"), by = \"word\") %>% \n  summarise(meansent = mean(score)) \n\nfst <- campaign_tweets %>%\n  group_by(month = round_date(created_at, \"month\")) %>% \n  filter(month >= \"2016-12-01\") %>% #select only tweets where he uses words 'fake news'\n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  inner_join(get_sentiments(\"afinn\"), by = \"word\") %>% \n  summarise(meansent = mean(score)) \n\n# fst and st in one graph\nst$FakeNews <- rep(1,nrow(st))\nfst$FakeNews <- rep(0,nrow(fst))\nstd <- rbind(st,fst)\nstd$FakeNews <- factor(std$FakeNews, levels = c(0,1), labels = c(\"Excluding FN\", \"Only FN\"))\n\nftd <- ggplot(std, aes(x =month, y = meansent, color = FakeNews)) +\n  geom_line(size = 1) +\n  #  scale_y_continuous(breaks = c(seq(-0.6, 0.6, 0.1))) +\n  geom_point(shape = 15, color = \"darkgrey\", size = 2) +\n   theme_bw(base_size =5)+\n   ggtitle(\"B: Sentiment score, including and excluding 'fake news'-tweets\")  +\n   ylab(\"AFINN\\nsentiment score\") +\n   xlab(NULL) +\n   scale_color_grey() +\n  guides(fill = guide_legend(title.position=\"top\")) +\n   common_ops +\n  theme(panel.grid.major.x = element_line(size=.1, colour = \"grey\"),\n        panel.grid.major.y = element_blank(),\n        legend.title = element_blank(), \n        legend.position = c(0.83,0.16),\n        legend.text =  element_text(size=6),\n        legend.background = element_rect(fill = \"transparent\", color = NA, size=.5))\n\nmultiplot(ct, ftd, cols = 1)",
    "created" : 1519745505711.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "23|70|57|0|\n",
    "hash" : "611611398",
    "id" : "DB8272DF",
    "lastKnownWriteTime" : 1519746069,
    "last_content_update" : 1519746069871,
    "path" : "Z:/Projects/R Projects/spillover_submission/scripts/trump_tweets.R",
    "project_path" : "scripts/trump_tweets.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}